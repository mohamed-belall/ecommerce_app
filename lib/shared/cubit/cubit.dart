import 'package:bloc/bloc.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:shop_app/models/categories_models.dart';import 'package:shop_app/models/change_favorites_models.dart';import 'package:shop_app/models/favorites_models.dart';import 'package:shop_app/models/home_models.dart';import 'package:shop_app/models/search_models.dart';import 'package:shop_app/models/user_login_model.dart';import 'package:shop_app/moduels/categories/categories_screen.dart';import 'package:shop_app/moduels/favorite/favorites_screen.dart';import 'package:shop_app/moduels/products/products_screen.dart';import 'package:shop_app/moduels/setting/setting_screen.dart';import 'package:shop_app/shared/constant.dart';import 'package:shop_app/shared/cubit/state.dart';import 'package:shop_app/shared/network/local/shared_prefercne.dart';import 'package:shop_app/shared/network/remote/dio_helper.dart';class ShopCubit extends Cubit<ShopStates> {  ShopCubit() : super(ShopInitialState());  static ShopCubit get(context) => BlocProvider.of(context);  /* hide password */  IconData suffixIcon = Icons.visibility_outlined;  bool obs = true;  void changePasswordVisibility() {    obs = !obs;    suffixIcon =        obs ? Icons.visibility_outlined : Icons.visibility_off_outlined;    emit(ShopChangePasswordVisState());  }  /* bottom nav bar */  int currentIndex = 0;  void changeBottomNavBar(int index) {    currentIndex = index;    emit(ShopChangeBottomNavState());  }  List<Widget> screens = [    ProductScreen(),    CategoriesScreen(),    FavoritesScreen(),    SettingScreen(),  ];  // home cubit  HomeModels? homeModels;  Map<int?, bool?> favorites = {};  void getHomeData() {    emit(ShopLoadingHomeState());    DioHelper.getData(      url: 'home',      token: CasheHelper.getData(key: 'token').toString(),    ).then((value) {      homeModels = HomeModels.fromJson(value.data);      homeModels!.data!.product.forEach((element) {        favorites.addAll({          element.id: element.inFavorites,        });      });      emit(ShopSuccessHomeState());    }).catchError((error) {      print(error.toString());      emit(ShopErrorHomeState());    });  }  // Login  void userLogin({    required String email,    required String password,  }) {    UserLoginModel userLoginModel;    emit(ShopLoginLoadingState());    DioHelper.postData(      url: 'login',      data: {        'email': email,        'password': password,      },    ).then((value) {      userLoginModel = UserLoginModel.fromJson(value.data);      emit(ShopLoginSuccessState(userLoginModel));    }).catchError((error) {      emit(ShopLoginErrorState());      print(error.toString());    });  }  // Update  void userUpdate({    required String email,    required String name,    required String phone,  }) {    emit(ShopUpdateLoadingState());    DioHelper.putData(      url: 'update-profile',      token: token,      data: {        'name': name,        'email': email,        'phone': phone,      },    ).then((value) {      userData = UserLoginModel.fromJson(value.data);      print(userData!.data!.phone.toString());      emit(ShopUpdateSuccessState(userData!));    }).catchError((error) {      emit(ShopUpdateErrorState());      print(error.toString());    });  }  // Register  void userRegister({    required String phone,    required String name,    required String email,    required String password,  }) {    UserLoginModel userRegisterModel;    emit(ShopRegisterLoadingState());    DioHelper.postData(      url: 'login',      data: {        'email': email,        'password': password,        'phone': phone,        'name': name,      },    ).then((value) {      userRegisterModel = UserLoginModel.fromJson(value.data);      emit(ShopRegisterSuccessState(userRegisterModel));    }).catchError((error) {      emit(ShopRegisterErrorState());      print(error.toString());    });  }  // favorites  ChangeFavoritesModels? changeFavoritesModels;  void changeFavorites(int productId) {    favorites[productId] = !favorites[productId]!;    emit(ShopSuccessChangeFavoritesState());    DioHelper.postData(      url: 'favorites',      data: {        'product_id': productId,      },      token: token,    ).then((value) {      emit(ShopSuccessChangeFavoritesState());      changeFavoritesModels = ChangeFavoritesModels.fromJson(value.data);      if (changeFavoritesModels!.status == false) {        favorites[productId] = !favorites[productId]!;      } else {        getFavorites();      }      // print(value.data);      // print(favorites[productId].toString());    }).catchError((error) {      emit(ShopErrorChangeFavoritesState());    });  }  // get favorites  FavoritesModels? favoritesModels;  void getFavorites() {    DioHelper.getData(      url: 'favorites',      token: token,    ).then((value) {      favoritesModels = FavoritesModels.fromJson(value.data);      print(token);      print(favoritesModels!.data!.data[0]);      emit(ShopSuccessFavoritesState());    }).catchError((error) {      emit(ShopErrorFavoritesState());    });  }  // get UserData  UserLoginModel? userData;  void getUserData() {    DioHelper.getData(      url: 'profile',      token: token,    ).then((value) {      userData = UserLoginModel.fromJson(value.data);      print(token);      print(userData!.data!.name);      emit(ShopSuccessUserDataState());    }).catchError((error) {      emit(ShopErrorUserDataState());    });  }  // categories cubit  CategoriesModel? categoriesModel;  void getCategoriesData() {    DioHelper.getData(      url: 'categories',      token: CasheHelper.getData(key: 'token').toString(),    ).then((value) {      categoriesModel = CategoriesModel.fromJson(value.data);      emit(ShopSuccessCategoriesState());      // print(value.data.toString());    }).catchError((error) {      print(error.toString());      emit(ShopErrorCategoriesState());    });  }  // search  cubit  SearchModels? searchModels;  void getSearch(String text) {    emit(ShopSearchLoadingState());    DioHelper.postData(      url: 'products/search',      token: token,      data: {        'text': text,      },    ).then((value) {      searchModels = SearchModels.fromJson(value.data);      emit(ShopSearchSuccessState());    }).catchError((error) {      print(error);      emit(ShopSearchErrorState());    });  }}
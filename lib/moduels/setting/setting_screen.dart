import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:shop_app/moduels/shop_login_screen/shop_login_screen.dart';import 'package:shop_app/shared/cubit/cubit.dart';import 'package:shop_app/shared/cubit/state.dart';import 'package:shop_app/shared/network/local/shared_prefercne.dart';import 'package:shop_app/shared/style/colors.dart';class SettingScreen extends StatelessWidget {  final formKey = GlobalKey<FormState>();  final nameController = TextEditingController();  final emailController = TextEditingController();  final phoneController = TextEditingController();  @override  Widget build(BuildContext context) {    return BlocConsumer<ShopCubit, ShopStates>(      listener: (context, state) {},      builder: (context, state) {        var model = ShopCubit.get(context).userData!;        nameController.text = model.data!.name!;        emailController.text = model.data!.email!;        phoneController.text = model.data!.phone!;        return Scaffold(          body: Padding(            padding: const EdgeInsets.all(20.0),            child: model.data != null                ? Form(                    key: formKey,                    child: Column(                      children: [                        if (state is ShopUpdateLoadingState)                          LinearProgressIndicator(),                        SizedBox(                          height: 20.0,                        ),                        TextFormField(                          keyboardType: TextInputType.name,                          controller: nameController,                          validator: (value) {                            if (value!.isEmpty) {                              return 'name must not be empty';                            }                          },                          decoration: InputDecoration(                            labelText: 'name',                            prefixIcon: Icon(Icons.person),                            border: OutlineInputBorder(                              borderRadius: BorderRadius.circular(                                20.0,                              ),                            ),                          ),                        ),                        SizedBox(                          height: 20.0,                        ),                        TextFormField(                          keyboardType: TextInputType.emailAddress,                          controller: emailController,                          validator: (value) {                            if (value!.isEmpty) {                              return 'email must not be empty';                            }                          },                          decoration: InputDecoration(                            labelText: 'Email Address',                            prefixIcon: Icon(Icons.email_outlined),                            border: OutlineInputBorder(                              borderRadius: BorderRadius.circular(                                20.0,                              ),                            ),                          ),                        ),                        SizedBox(                          height: 20.0,                        ),                        TextFormField(                          keyboardType: TextInputType.phone,                          controller: phoneController,                          validator: (value) {                            if (value!.isEmpty) {                              return 'phone must not be empty';                            }                          },                          decoration: InputDecoration(                            labelText: 'Phone',                            prefixIcon: Icon(Icons.phone),                            border: OutlineInputBorder(                              borderRadius: BorderRadius.circular(                                20.0,                              ),                            ),                          ),                        ),                        SizedBox(                          height: 20.0,                        ),                        Material(                          color: defaultColor,                          borderRadius: BorderRadius.circular(                            20.0,                          ),                          elevation: 20.0,                          child: MaterialButton(                            minWidth: double.infinity,                            height: 60.0,                            onPressed: () {                              if (formKey.currentState!.validate()) {                                ShopCubit.get(context).userUpdate(                                  email: emailController.text,                                  name: nameController.text,                                  phone: phoneController.text,                                );                              }                              print(phoneController.text);                              print(nameController.text);                            },                            child: Text(                              'UPDATE',                              style: TextStyle(                                color: Colors.white,                                fontSize: 20.0,                                fontWeight: FontWeight.bold,                              ),                            ),                          ),                        ),                        SizedBox(                          height: 20.0,                        ),                        Material(                          color: defaultColor,                          borderRadius: BorderRadius.circular(                            20.0,                          ),                          elevation: 20.0,                          child: MaterialButton(                            minWidth: double.infinity,                            height: 60.0,                            onPressed: () {                              CasheHelper.removeData(key: 'token').then(                                (value) {                                  Navigator.pushAndRemoveUntil(                                    context,                                    MaterialPageRoute(                                      builder: (context) => ShopLoginScreen(),                                    ),                                    (route) => false,                                  );                                },                              );                            },                            child: Text(                              'LOGOUT',                              style: TextStyle(                                color: Colors.white,                                fontSize: 20.0,                                fontWeight: FontWeight.bold,                              ),                            ),                          ),                        ),                      ],                    ),                  )                : Center(child: CircularProgressIndicator()),          ),        );      },    );  }}